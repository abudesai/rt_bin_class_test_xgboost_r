#!/usr/bin/env Rscript

## ---- Initialising libraries ----

print("importing libraries")

library(dplyr)
library(tidyr)
library(readr)
library(xgboost)
library(rjson)
library(caTools)
library(imputeTS)
# library(glue)
# library(ggplot2)
# library(tibble)
# library(purrr)
# library(stringr)
# library(lubridate)
# library(plotly)
# library(zeallot)
# library(pROC)
# library(forcats)

# library(ggplot2)
# library(tibble)
# library(tidyr)
# library(readr)
# library(purrr)
# library(dplyr)
# library(stringr)
# library(lubridate)
# library(plotly)
# library(glue)
# library(zeallot)
# library(xgboost)
# library(pROC)
# library(forcats)
# library(rjson)
# library(caTools)


options(dplyr.summarise.inform = FALSE)

## Script that holp helper functions
source('algorithm/0.common_funcs.R')


## Get the training data file
data   <-
  glue(
    '/opt/ml_vol/inputs/data/testing/binaryClassificationBaseMainInput/',
    list.files(path = "/opt/ml_vol/inputs/data/testing/binaryClassificationBaseMainInput")
  )



tester <- function(data_path)
{
  
  print("in testing")
  ## Load model and test data
  trained_model         <- read_rds('/opt/ml_vol/model/artifacts/model.rds')
  variables_to_encode   <- trained_model$variables_to_encode
  target_class          <- trained_model$target_class
  other_class           <- trained_model$other_class
  id_column             <- trained_model$id_column
  df_test             <- read_csv(data_path)
  
  id <- df_test %>% select(id_column)
  
  
  print("preprocessing data")
  ## Encode categorical features with number of training encoding
  if (!is.null(trained_model$encodings)) {
    encodings_tmp <-
      trained_model$encodings %>%
      map(function(x) {
        if (is.data.frame(x)) {
          x[, 2, drop = TRUE] %>% set_names(x[, 1, drop = TRUE])
        } else {
          x
        }
      })
    for (catvar in variables_to_encode) {
      df_test[[catvar]] <-
        encodings_tmp[[catvar]][df_test[[catvar]] %>% as.character()]
    }
  }
  
  
  print("loading model")
  model <- trained_model$mdl
  
  ## Getting probability of each row for the target_class
  
  print("Making predictions")
  test_results <-
    tester_func(mdl = model,
                test_set = df_test)
  
  test_results <- test_results$test_predictions
  
  test_results <-
    test_results %>% 
    mutate(x = 1-pred)
  
  names(test_results)[names(test_results) == 'pred'] <- get("target_class")
  names(test_results)[names(test_results) == 'x'] <- get("other_class")
  
  ## Saving ids with prediction
  
  print("saving predictions")
  predictions <- cbind(id, test_results)
  predictions %>% write.csv('/opt/ml_vol/outputs/testing_outputs/test_predictions.csv', row.names = FALSE)
}


run_testing <- function(){
  out <- tryCatch(
    {      
      print("Starting test predictions")  
      tester(data)
      print("test predictions done")
    },
    error=function(e){
      Error <<- e$message
      sink(file = "/opt/ml_vol/outputs/errors/test_error.txt")
      print(paste("Testing error:"))
      print(Error)
      sink()
    }
  )
  return(out)
}



run_testing()